// src/pages/Eastern.jsx
import React, { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import {
  collection, addDoc, onSnapshot, deleteDoc, updateDoc,
  doc, query, orderBy, serverTimestamp, setDoc
} from "firebase/firestore";
import { db } from "../firebase";
import "../GlobalStyles.css";

/* ูุงุฆูุฉ ุซุงุจุชุฉ ูุจุฏุงูุฉ (ูููู ุญุฐููุง ุฃู ุชูููููุง ูุงุญููุง) */
const BASE_ITEMS = [
  "ููุงูุฉ ูุงุฏุฌ","ุจุณุจูุณุฉ ุณุงุฏุฉ","ุจุณุจูุณุฉ ูุดุทุฉ","ุจูุญ ุงูุดุงู",
];

const Eastern = () => {
  const nav = useNavigate();

  // ูุฏุฎูุงุช
  const [name, setName]         = useState("");
  const [customName, setCustom] = useState("");
  const [qty, setQty]           = useState("");
  const [unit, setUnit]         = useState("ุนุฏุฏ");

  // ุจูุงูุงุช & ููุงุฆู
  const [items, setItems]       = useState([]);
  const [itemOptions, setOpts]  = useState([...BASE_ITEMS, "ุฃุฏุฎู ุตูู ุฌุฏูุฏ"]);
  const [search, setSearch]     = useState("");

  /* Collections */
  const ordersRef = collection(db, "easternOrders");
  const itemsRef  = collection(db, "easternItems");    // ูุญุชูุธ ุจุฃุณูุงุก ุงูุฃุตูุงู

  /* -------- ุชุญููู ุฃุณูุงุก ุงูุฃุตูุงู -------- */
  useEffect(() => {
    const unsub = onSnapshot(itemsRef, snap => {
      const extra = snap.docs.map(d => d.id);
      setOpts([
        ...BASE_ITEMS,
        ...extra.filter(x => !BASE_ITEMS.includes(x)),
        "ุฃุฏุฎู ุตูู ุฌุฏูุฏ"
      ]);
    });
    return () => unsub();
  }, []);

  /* -------- ุชุญููู ุงูุฃูุฑุฏุฑุงุช ุจุชุฑุชูุจ ุซูุงุฆู -------- */
  useEffect(() => {
    const q = query(
      ordersRef,
      orderBy("date","asc"), orderBy("createdAt","asc")
    );
    return onSnapshot(q, snap =>
      setItems(snap.docs.map(d => ({ id:d.id, ...d.data() })))
    );
  }, []);

  /* -------- ุฅุถุงูุฉ ุงุณู ุฌุฏูุฏ ููุงุฆูุฉ ุงูุฃุตูุงู -------- */
  const ensureNewItem = (n) =>
    setDoc(doc(itemsRef, n), { createdAt: serverTimestamp() }, { merge:true });

  /* -------- ุฅุถุงูุฉ ุฃูุฑุฏุฑ -------- */
  const handleAdd = async () => {
    const finalName = name === "ุฃุฏุฎู ุตูู ุฌุฏูุฏ" ? customName.trim() : name.trim();
    if (!finalName || !qty) return alert("ุฃุฏุฎู ุงูุงุณู ูุงููููุฉ");

    if (name === "ุฃุฏุฎู ุตูู ุฌุฏูุฏ") await ensureNewItem(finalName);

    await addDoc(ordersRef, {
      name: finalName,
      quantity: Number(qty),
      unit,
      date: new Date().toLocaleDateString("fr-CA"),
      createdAt: serverTimestamp(),
      updated: false,
    });

    setName(""); setCustom(""); setQty(""); setUnit("ุนุฏุฏ");
  };

  /* -------- ุญุฐู -------- */
  const handleDelete = async (id) => {
    if (prompt("ูููุฉ ุงููุฑูุฑุ") !== "2991034") return;
    await deleteDoc(doc(ordersRef, id));
  };

  /* -------- ุชุนุฏูู -------- */
  const handleEdit = async (it) => {
    if (prompt("ูููุฉ ุงููุฑูุฑุ") !== "2991034") return;
    const newName = prompt("ุงุณู ุฌุฏูุฏ:", it.name) ?? it.name;
    const newQty  = prompt("ูููุฉ ุฌุฏูุฏุฉ:", it.quantity) ?? it.quantity;
    const newUnit = prompt("ูุญุฏุฉ ุฌุฏูุฏุฉ:", it.unit) ?? it.unit;
    await updateDoc(doc(ordersRef, it.id), {
      name: newName,
      quantity: Number(newQty),
      unit: newUnit,
      updated: true,
    });
  };

  /* -------- ููุชุฑุฉ -------- */
  const filtered = items.filter(
    it => it.name.includes(search.trim()) || it.date.includes(search.trim())
  );

  /* -------- ูุงุฌูุฉ ุงููุณุชุฎุฏู -------- */
  return (
    <div className="factory-page" dir="rtl">
      <button className="back-btn" onClick={()=>nav(-1)}>โฌ ุฑุฌูุน</button>
      <h2 className="page-title">๐ฌ ุฃูุฑุฏุฑุงุช ุงูุญูููุงุช ุงูุดุฑููุฉ</h2>
      <button className="print-btn" onClick={()=>window.print()}>๐จ๏ธ ุทุจุงุนุฉ</button>

      {/* ูููุฐุฌ ุงูุฅุฏุฎุงู */}
      <div className="form-row">
        <select value={name} onChange={e=>setName(e.target.value)}>
          <option value="">ุงุฎุชุฑ ุตูู</option>
          {itemOptions.map(opt=>(
            <option key={opt}>{opt}</option>
          ))}
        </select>

        {name === "ุฃุฏุฎู ุตูู ุฌุฏูุฏ" && (
          <input
            placeholder="ุงุณู ุงูุตูู ุงูุฌุฏูุฏ"
            value={customName}
            onChange={e=>setCustom(e.target.value)}
          />
        )}

        <input type="number" placeholder="ุงููููุฉ"
               value={qty} onChange={e=>setQty(e.target.value)} />

        <select value={unit} onChange={e=>setUnit(e.target.value)}>
          <option>ุนุฏุฏ</option><option>ุตุงุฌ</option><option>ุตูููุฉ</option>
          <option>ูููู</option><option>ุณูุฑููุฒ</option>
        </select>

        <button onClick={handleAdd}>ุชุณุฌูู ุงูุตูู</button>
      </div>

      {/* ุจุญุซ */}
      <input className="search" placeholder="ุจุญุซ ุจุงูุงุณู ุฃู ุงูุชุงุฑูุฎ"
             value={search} onChange={e=>setSearch(e.target.value)} />

      {/* ุฌุฏูู */}
      <table className="styled-table">
        <thead>
          <tr><th>ุงูุชุงุฑูุฎ</th><th>ุงูุตูู</th><th>ุงููููุฉ</th>
              <th>ุงููุญุฏุฉ</th><th>ุฅุฌุฑุงุกุงุช</th></tr>
        </thead>
        <tbody>
          {filtered.length ? filtered.map(it=>(
            <tr key={it.id} className={it.updated ? "edited-row" : ""}>
              <td>{it.date}</td><td>{it.name}</td>
              <td>{it.quantity}</td><td>{it.unit}</td>
              <td>
                <button className="edit-btn"   onClick={()=>handleEdit(it)}>โ๏ธ</button>{" "}
                <button className="delete-btn" onClick={()=>handleDelete(it.id)}>๐๏ธ</button>
              </td>
            </tr>
          )) : <tr><td colSpan="5">ูุง ุชูุฌุฏ ุจูุงูุงุช.</td></tr>}
        </tbody>
      </table>
    </div>
  );
};

export default Eastern;
