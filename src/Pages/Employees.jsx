// src/pages/Employees.jsx
import React, { useState, useEffect } from "react";
import {
  collection,
  addDoc,
  getDocs,
} from "firebase/firestore";
import { ref, uploadBytes, getDownloadURL } from "firebase/storage";
import { db, storage } from "../firebase";
import { jsPDF } from "jspdf";          // ๐ ุชุฃููุฏ ูู ุชูุตูุจ jspdf
import "jspdf-autotable";               // ๐ ุชุฃููุฏ ูู ุชูุตูุจ jspdfโautotable
import { useNavigate } from "react-router-dom";
import "../GlobalStyles.css";

const Employees = () => {
  /* ----- state ----- */
  const [employees, setEmployees] = useState([]);
  const [name, setName] = useState("");
  const [job, setJob] = useState("");
  const [role, setRole] = useState("ููุธู");
  const [salary, setSalary] = useState("");
  const [idImage, setIdImage] = useState(null);
  const [search, setSearch] = useState("");

  const navigate = useNavigate();

  /* ----- ุชุญููู ุงูุจูุงูุงุช ูุฑุฉ ูุงุญุฏุฉ ----- */
  useEffect(() => {
    fetchEmployees();
  }, []);

  /* ----- ุฌูุจ ุฌููุน ุงูููุธููู ูู Firestore ----- */
  const fetchEmployees = async () => {
    const snapshot = await getDocs(collection(db, "employees"));
    const data = snapshot.docs.map((doc) => ({
      id: doc.id,
      ...doc.data(),
    }));
    setEmployees(data);
  };

  /* ----- ุฅุถุงูุฉ ููุธู ุฌุฏูุฏ ----- */
  const handleAddEmployee = async (e) => {
    e.preventDefault();
    if (!name || !job) return alert("ูุฑุฌู ุฅุฏุฎุงู ุงูุงุณู ูุงููุธููุฉ");

    let idImageUrl = "";

    // ุฑูุน ุตูุฑุฉ ุงูุจุทุงูุฉ ุฅูู Firebase Storage
    if (idImage) {
      const imageRef = ref(storage, `idCards/${Date.now()}_${idImage.name}`);
      const snapshot = await uploadBytes(imageRef, idImage);
      idImageUrl = await getDownloadURL(snapshot.ref);
    }

    await addDoc(collection(db, "employees"), {
      name,
      job,
      role,
      salary,
      idImageUrl,
      createdAt: new Date(),
    });

    // ุฅุนุงุฏุฉ ุงูุถุจุท
    setName("");
    setJob("");
    setRole("ููุธู");
    setSalary("");
    setIdImage(null);

    fetchEmployees();
  };

  /* ----- ุชุตุฏูุฑ ุงูุฌุฏูู ุฅูู PDF ----- */
  const exportToPDF = () => {
    const doc = new jsPDF();
    doc.text("ูุงุฆูุฉ ุงูููุธููู", 14, 10);
    doc.autoTable({
      startY: 20,
      head: [["ุงูุงุณู", "ุงููุธููุฉ", "ุงูุตูุงุญูุฉ", "ุงูุฑุงุชุจ"]],
      body: employees.map((emp) => [
        emp.name,
        emp.job,
        emp.role,
        emp.salary || "-",
      ]),
    });
    doc.save("ุงูููุธููู.pdf");
  };

  /* ----- ุงูุจุญุซ / ุงูููุชุฑุฉ ----- */
  const filteredEmployees = employees.filter((emp) =>
    emp.name.toLowerCase().includes(search.toLowerCase()) ||
    emp.job.toLowerCase().includes(search.toLowerCase())
  );

  /* ----- JSX ----- */
  return (
    <div className="factory-page">
      {/* ุฒุฑ ุงูุฑุฌูุน */}
      <button className="back-button" onClick={() => navigate(-1)}>
        โฌ๏ธ ุฑุฌูุน
      </button>

      <h2 className="page-title">ุฅุฏุงุฑุฉ ุงูููุธููู</h2>

      {/* ูููุฐุฌ ุฅุถุงูุฉ ููุธู */}
      <form onSubmit={handleAddEmployee} className="form-row">
        <input
          type="text"
          placeholder="ุงุณู ุงูููุธู"
          value={name}
          onChange={(e) => setName(e.target.value)}
        />
        <input
          type="text"
          placeholder="ุงููุธููุฉ"
          value={job}
          onChange={(e) => setJob(e.target.value)}
        />
        <input
          type="number"
          placeholder="ุงูุฑุงุชุจ"
          value={salary}
          onChange={(e) => setSalary(e.target.value)}
        />
        <select value={role} onChange={(e) => setRole(e.target.value)}>
          <option value="ููุธู">ููุธู</option>
          <option value="ูุดุฑู">ูุดุฑู</option>
        </select>
        <input
          type="file"
          accept="image/*"
          onChange={(e) => setIdImage(e.target.files[0])}
        />
        <button type="submit">โ ุฅุถุงูุฉ</button>
      </form>

      {/* ุงูุจุญุซ ูุงูุทุจุงุนุฉ */}
      <div className="form-row">
        <input
          type="text"
          placeholder="ุจุญุซ ุจุงูุงุณู ุฃู ุงููุธููุฉ..."
          value={search}
          onChange={(e) => setSearch(e.target.value)}
        />
        <button onClick={exportToPDF}>๐จ๏ธ ุชุตุฏูุฑ PDF</button>
      </div>

      {/* ุฌุฏูู ุงูุจูุงูุงุช */}
      <table className="styled-table">
        <thead>
          <tr>
            <th>ุงูุงุณู</th>
            <th>ุงููุธููุฉ</th>
            <th>ุงูุตูุงุญูุฉ</th>
            <th>ุงูุฑุงุชุจ</th>
            <th>ุงูุจุทุงูุฉ</th>
          </tr>
        </thead>
        <tbody>
          {filteredEmployees.map((emp) => (
            <tr key={emp.id}>
              <td>{emp.name}</td>
              <td>{emp.job}</td>
              <td>{emp.role}</td>
              <td>{emp.salary || "-"}</td>
              <td>
                {emp.idImageUrl ? (
                  <a href={emp.idImageUrl} target="_blank" rel="noreferrer">
                    ุนุฑุถ ุงูุตูุฑุฉ
                  </a>
                ) : (
                  "โ"
                )}
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default Employees;
