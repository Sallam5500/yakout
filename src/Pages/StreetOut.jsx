import React, { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import { db } from "../firebase";
import {
  collection, addDoc, onSnapshot, deleteDoc, doc,
  serverTimestamp, runTransaction, setDoc
} from "firebase/firestore";
import "../GlobalStyles.css";

/* ===== util ===== */
const normalize = (s = "") => s.trim().replace(/\s+/g, " ").toLowerCase();
const mapUnit = (u) => ({
  ุนุฏุฏ: "qty",           // ูุนุชุจุฑ ยซุนุฏุฏยป = ุฒุฌุงุฌุฉ
  ุฌุฑุงู: "g",
  ููุณ: "bag",
  ูููู: "kg", ููููุฌุฑุงู: "kg",
  ุฒุฌุงุฌุฉ: "qty",
  ูุฑุชููุฉ: "carton",
  ุดูุงุฑู: "sack",
  ูุฌุจุฉ: "meal"
}[u] || u);

const CONV = {
  /* ูุฒู */
  g: { kg: 1 / 1000 },        kg: { g: 1000 },
  /* ุนุจูุงุช */
  carton: { qty: 12 },        qty: { carton: 1 / 12 },
  /* ุฃูุซูุฉ ุฃุฎุฑู */
  bottle: { carton: 1 / 12 }, carton: { bottle: 12 },
  sack: { kg: 50 },           kg: { sack: 1 / 50 },
  bag: { g: 1000 },           g: { bag: 1 / 1000 }
};
const convert = (q, f, t) => {
  if (f === t) return q;
  const F = mapUnit(f), T = mapUnit(t);
  if (CONV[F]?.[T]) return q * CONV[F][T];
  if (CONV[T]?.[F]) return q / CONV[T][F];
  throw Error(`ูุง ุชุญููู ูู ${f} โ ${t}`);
};

/* ===== ุจูุงูุงุช ุซุงุจุชุฉ ===== */
const BASE_ITEMS = [
  "ุดูุงุฑุฉ ูุฑููู", "ุจุณุจูุณุฉ", "ููุณ ุจูุฏู ูู ุจุณุจูุณุฉ", "ูุฑูุณุฉ", "ุจุณููุฉ",
  "ุญุจูุจู", "ุฑููุด", "ูููุฒุง", "ุฌูุงุด", "ูุดุงุจู", "ุตูุงุจุน", "ุจูุญ",
  "ุนูุจ ูุฑููุฉ", "ูุดุทูุทุฉ", "ูุงุฏุฌ", "ููุณ ูุงูู 1.750 ุฌุฑุงู", "ููุณ ุฌุฑุงูู",
  "ุนุฒูุฒูุฉ", "ุจุณุจูุณุฉ ุชุฑูู", "ุดูุงุฑุฉ ุณูุฏุงูู ููุณุฑ", "ู ุจูุฏู ูู ููุณุฑ",
  "ููุณ ุณูุฏุงูู ุฑูุดูู", "ููุณ ุจูุฏู ูุญูุต 250 ุฌุฑุงู", "ููุณ ุฃูููุฑ",
  "ูุฑุชููุฉ ุจูุฏู ุณููู", "ู ุณูุฑ ุจูุฏุฑู", "ู ุฌูุฒ ููุฏ ูุงุนู", "ู ุณููุฏ",
  "ุฌููุงุชููุฉ", "ู ูุจู ุจูุฏุฑู", "ููุณ ูุจู ุจูุฏุฑู 150 ุฌุฑุงู", "ุดููููุงุชู ุงุณูุฑ",
  "ุดููููุงุชู ุจูุถุงุก", "ูุฑุชููุฉ ุฒูุช", "ุฌุฑูู ุฒูุช", "ูุจุงูู", "ุจุงุณุชุฑู",
  "ูุงูููุง", "ูุงูููู 7ุณู", "ููู ุงุญูุฑ", "ุนูุจ ุทูุจูุฉ", "ูุฑุชููุฉ ุฎููุฑุฉ ููุฑูุฉ",
  "ุณููุฉ ูุฑู", "ูุดุง", "ุณูุฑ", "ุฏููู ุงูุฑุงู", "ูุฌุจุฉ ุจุชู ููุฑ",
  "ุฌูุฒ ููุฏ ูุญูุต", "ููุฒ ูุญูุต ูุฌุฑูุด", "ุฌูุฒ ููุฏ ุงุจูุถ", "ูุฌุจุฉ ุจุณููุช",
  "ุฑุงุจุทุฉ ุญูููุงุช", "ุนูุจ ุจุชู ููุฑ ูุต", "ุนูุจ ุจุณููุช ูุต", "ุนูุจ ุบุฑูุจุฉ ูุต",
  "ุนูุจ ูุนู ุณุงุฏู ูุต", "ุนูุจ ูุนู ููุจู ูุต", "ูุนุจ ุฌุงุชูู",
  "ุฏูุชุฑ ุชุฑูุณููุฑ ุงููุงู", "ููุจู", "ูุฌุจู ุณูุฑุจ", "ุจูุฑ ุงุณุชุฑุชุด",
  "ูุฑู ุณูููุงู ููุณ", "ุนูุจ ุฌุงุชูู ุฏุณุชู", "ุฏูุชุฑ ุชุฑุงูุณููุฑ ุณุงุฏู",
  "ูุฑุชููุฉ ุจููู ุจูุฏุฑ", "ุณุชุงู 2ุณู", "ุฌููู ุดูุงู", "ุฌููู ุณุฎู"
];
const UNIT_MAP = ["ุนุฏุฏ", "ุฒุฌุงุฌุฉ", "ูุฑุชููุฉ", "ุฌุฑุงู", "ููููุฌุฑุงู", "ุดูุงุฑู", "ููุณ"];

/* ===== ุงูููููู ===== */
const StreetOut = () => {
  const nav = useNavigate();
  const [opts, setOpts] = useState([]);
  const [item, setItem] = useState("");
  const [qty,  setQty]  = useState("");
  const [unit, setUnit] = useState("ุนุฏุฏ");
  const [note, setNote] = useState("");
  const [recs, setRecs] = useState([]);
  const [flt,  setFlt]  = useState([]);
  const [term, setTerm] = useState("");
  const [date, setDate] = useState(new Date().toISOString().split("T")[0]);

  const outCol = collection(db, "street-out");
  const itemsCol = collection(db, "items");
  const stCol = collection(db, "street-store");

  /* ุชุญููู ุงูุณุฌูุงุช ูุงููุงุฆูุฉ */
  useEffect(() => onSnapshot(outCol, s => {
    const d = s.docs.map(x => ({ id: x.id, ...x.data() }));
    setRecs(d); setFlt(d);
  }), []);
  useEffect(() => onSnapshot(itemsCol, s => {
    const extra = s.docs.map(d => d.id);
    setOpts([...new Set([...BASE_ITEMS, ...extra])]);
  }), []);

  const ensureItem = name =>
    setDoc(doc(itemsCol, name), { createdAt: serverTimestamp() }, { merge: true });

  /* ===== ุชุณุฌูู ุงูุตุงุฏุฑ ===== */
  const handleSubmit = async () => {
    const n = item.trim(), q = +qty;
    if (!n || !q) return alert("ุฃุฏุฎู ุงูุงุณู ูุงููููุฉ");
    if (!opts.includes(n)) await ensureItem(n);

    const key   = normalize(n);
    const stRef = doc(stCol, key);
    const dayDoc = doc(db, "street-store", date);

    try {
      let prevQtyRow = 0, curQtyRow = 0, storeUnit = unit;

      await runTransaction(db, async t => {
        const snap = await t.get(stRef);
        if (!snap.exists())
          throw Error("โ ุงูุตูู ุบูุฑ ููุฌูุฏ ูู ุฑุตูุฏ ุงููุฎุฒู");

        const bal = snap.data();
        storeUnit = bal.unit;
        const need = convert(q, unit, storeUnit);
        if (need > bal.quantity)
          throw Error(`โ ุงููููุฉ ุบูุฑ ูุงููุฉ (ุงููุชุงุญ ${bal.quantity} ${storeUnit})`);

        prevQtyRow = convert(bal.quantity, storeUnit, unit);
        curQtyRow  = convert(bal.quantity - need, storeUnit, unit);

        t.update(stRef, { quantity: bal.quantity - need });
      });

      /* street-out */
      await addDoc(outCol, {
        name: n, nameKey: key, quantity: q, unit,
        note, date, createdAt: serverTimestamp()
      });

      /* ุตู ุณุงููุจ ูู ููู ุงูุดุงุฑุน */
      await addDoc(collection(dayDoc, "items"), {
        name: n, nameKey: key, quantity: -q, unit,
        prevQty: prevQtyRow, currentQty: curQtyRow,
        type: "out", createdAt: serverTimestamp()
      });

      setItem(""); setQty(""); setNote("");
    } catch (e) {
      alert(e.message);
    }
  };

  const handleDelete = async (id) => {
    if (prompt("ูููุฉ ุงููุฑูุฑุ") !== "2991034") return;
    if (!window.confirm("ุชุฃููุฏ ุงูุญุฐูุ")) return;
    await deleteDoc(doc(outCol, id));
  };

  const doSearch = () => {
    const t = term.trim().toLowerCase();
    setFlt(!t ? recs : recs.filter(r => normalize(r.name).includes(t) || r.date === t));
  };

  return (
    <div className="factory-page" dir="rtl">
      <button className="back-btn" onClick={() => nav(-1)}>โฌ ุฑุฌูุน</button>
      <h2 className="page-title">๐ค ุงูุตุงุฏุฑ ูู ุงููุฎุฒู</h2>

      <div className="form-row">
        <label>๐ ุงูุชุงุฑูุฎ:</label>
        <input type="date" value={date} onChange={e => setDate(e.target.value)} />
      </div>

      <div className="form-row">
        <input list="items" placeholder="ุงุณู ุงูุตูู" value={item} onChange={e => setItem(e.target.value)} />
        <datalist id="items">{opts.map(o => <option key={o} value={o} />)}</datalist>

        <input type="number" placeholder="ุงููููุฉ" value={qty} onChange={e => setQty(e.target.value)} />
        <select value={unit} onChange={e => setUnit(e.target.value)}>{UNIT_MAP.map(u => <option key={u}>{u}</option>)}</select>
        <input type="text" placeholder="ููุงุญุธุงุช" value={note} onChange={e => setNote(e.target.value)} />
        <button onClick={handleSubmit}>โ ุชุณุฌูู</button>
      </div>

      <div className="form-row">
        <input placeholder="ุจุญุซ" value={term} onChange={e => setTerm(e.target.value)} />
        <button onClick={doSearch}>๐ ุจุญุซ</button>
      </div>

      <div className="table-container">
        <table className="styled-table">
          <thead><tr><th>ุงูุตูู</th><th>ุงููููุฉ</th><th>ุงููุญุฏุฉ</th><th>ุงูููุงุญุธุงุช</th><th>ุงูุชุงุฑูุฎ</th><th>ุญุฐู</th></tr></thead>
          <tbody>{flt.map(r => (
            <tr key={r.id}>
              <td>{r.name}</td><td>{r.quantity}</td><td>{r.unit}</td>
              <td>{r.note || "-"}</td><td>{r.date}</td>
              <td><button onClick={() => handleDelete(r.id)}>๐๏ธ</button></td>
            </tr>
          ))}</tbody>
        </table>
      </div>
    </div>
  );
};

export default StreetOut;
