import React, { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import { db } from "../firebase";
import {
  collection, addDoc, onSnapshot,
  getDocs, collectionGroup,
  deleteDoc, doc, setDoc, serverTimestamp
} from "firebase/firestore";
import "../GlobalStyles.css";

const normalize = (s = "") => String(s).trim().replace(/\s+/g, " ").toLowerCase();
const isAddition = (path) => path.includes("street-store");
const isDeduction = (path) => path.includes("street-out");

const BASE_ITEMS = [
 "ุดูุงุฑุฉ ูุฑููู", "ุจุณุจูุณุฉ", "ููุณ ุจูุฏู ูู ุจุณุจูุณุฉ", "ูุฑูุณุฉ", "ุจุณููุฉ",
  "ุญุจูุจู", "ุฑููุด", "ูููุฒุง", "ุฌูุงุด", "ูุดุงุจู", "ุตูุงุจุน", "ุจูุญ",
  "ุนูุจ ูุฑููุฉ", "ูุดุทูุทุฉ", "ูุงุฏุฌ", "ููุณ ูุงูู 1.750 ุฌุฑุงู", "ููุณ ุฌุฑุงูู",
  "ุนุฒูุฒูุฉ", "ุจุณุจูุณุฉ ุชุฑูู", "ุดูุงุฑุฉ ุณูุฏุงูู ููุณุฑ", "ู ุจูุฏู ูู ููุณุฑ",
  "ููุณ ุณูุฏุงูู ุฑูุดูู", "ููุณ ุจูุฏู ูุญูุต 250 ุฌุฑุงู", "ููุณ ุฃูููุฑ",
  "ูุฑุชููุฉ ุจูุฏู ุณููู", "ู ุณูุฑ ุจูุฏุฑู", "ู ุฌูุฒ ููุฏ ูุงุนู", "ู ุณููุฏ",
  "ุฌููุงุชููุฉ", "ู ูุจู ุจูุฏุฑู", "ููุณ ูุจู ุจูุฏุฑู 150 ุฌุฑุงู", "ุดููููุงุชู ุงุณูุฑ",
  "ุดููููุงุชู ุจูุถุงุก", "ูุฑุชููุฉ ุฒูุช", "ุฌุฑูู ุฒูุช", "ูุจุงูู", "ุจุงุณุชุฑู",
  "ูุงูููุง", "ูุงูููู 7ุณู", "ููู ุงุญูุฑ", "ุนูุจ ุทูุจูุฉ", "ูุฑุชููุฉ ุฎููุฑุฉ ููุฑูุฉ",
  "ุณููุฉ ูุฑู", "ูุดุง", "ุณูุฑ", "ุฏููู ุงูุฑุงู", "ูุฌุจุฉ ุจุชู ููุฑ",
  "ุฌูุฒ ููุฏ ูุญูุต", "ููุฒ ูุญูุต ูุฌุฑูุด", "ุฌูุฒ ููุฏ ุงุจูุถ", "ูุฌุจุฉ ุจุณููุช",
  "ุฑุงุจุทุฉ ุญูููุงุช", "ุนูุจ ุจุชู ููุฑ ูุต", "ุนูุจ ุจุณููุช ูุต", "ุนูุจ ุบุฑูุจุฉ ูุต",
  "ุนูุจ ูุนู ุณุงุฏู ูุต", "ุนูุจ ูุนู ููุจู ูุต", "ูุนุจ ุฌุงุชูู",
  "ุฏูุชุฑ ุชุฑูุณููุฑ ุงููุงู", "ููุจู", "ูุฌุจู ุณูุฑุจ", "ุจูุฑ ุงุณุชุฑุชุด",
  "ูุฑู ุณูููุงู ููุณ", "ุนูุจ ุฌุงุชูู ุฏุณุชู", "ุฏูุชุฑ ุชุฑุงูุณููุฑ ุณุงุฏู",
  "ูุฑุชููุฉ ุจููู ุจูุฏุฑ", "ุณุชุงู 2ุณู", "ุฌููู ุดูุงู", "ุฌููู ุณุฎู"
];

const StreetOut = () => {
  const navigate = useNavigate();

  const [itemOptions, setItemOptions] = useState([]);
  const [item, setItem] = useState("");
  const [quantity, setQuantity] = useState("");
  const [note, setNote] = useState("");
  const [records, setRecords] = useState([]);
  const [filtered, setFiltered] = useState([]);
  const [searchTerm, setSearchTerm] = useState("");
  const [selectedDate, setSelectedDate] = useState(new Date().toISOString().split("T")[0]);

  /* Collections */
  const outCol = collection(db, "street-out");
  const itemsCol = collection(db, "items");

  /* ุชุญููู ุงูุตุงุฏุฑ */
  useEffect(() => {
    const unsub = onSnapshot(outCol, (snap) => {
      const data = snap.docs.map((d) => ({ id: d.id, ...d.data() }));
      setRecords(data);
      setFiltered(data);
    });
    return () => unsub();
  }, []);

  /* ุชุญููู ุฃุณูุงุก ุงูุฃุตูุงู */
  useEffect(() => {
    onSnapshot(itemsCol, (snap) => {
      const extra = snap.docs.map((d) => d.id);
      setItemOptions([...BASE_ITEMS, ...extra].filter((v, i, a) => a.indexOf(v) === i));
    });
  }, []);

  const ensureNewItem = async (name) =>
    setDoc(doc(itemsCol, name), { createdAt: serverTimestamp() }, { merge: true });

  const calcCurrentTotal = async (nameKey) => {
    let add = 0, out = 0;
    const all = await getDocs(collectionGroup(db, "items"));
    all.docs.forEach((snap) => {
      const d = snap.data();
      const k = d.nameKey || normalize(d.name);
      if (k !== nameKey) return;
      const q = parseFloat(d.quantity) || 0;
      if (isAddition(snap.ref.path)) add += q; else if (isDeduction(snap.ref.path)) out += q;
    });
    return add - out;
  };

  const handleSubmit = async () => {
    const name = item.trim();
    const qty = Number(quantity);
    if (!name || !qty) return alert("ุฃุฏุฎู ุงูุงุณู ูุงููููุฉ");

    if (!itemOptions.includes(name)) await ensureNewItem(name);

    const key = normalize(name);
    const prev = await calcCurrentTotal(key);
    const current = prev - qty;
    if (qty > prev) return alert(`โ ุงููููุฉ ุบูุฑ ูุงููุฉ (ุงููุชุงุญ ${prev})`);

    await addDoc(outCol, {
      name,
      nameKey: key,
      quantity: qty,
      prevQty: prev,
      currentQty: current,
      note,
      date: selectedDate,
      createdAt: serverTimestamp(),
    });

    setItem(""); setQuantity(""); setNote("");
  };

  const handleDelete = async (id) => {
    const pwd = prompt("ูููุฉ ุงููุฑูุฑ ููุญุฐูุ");
    if (pwd !== "2991034") return alert("ูููุฉ ุงููุฑูุฑ ุบูุฑ ุตุญูุญุฉ");
    if (!window.confirm("ุชุฃููุฏ ุงูุญุฐูุ")) return;
    await deleteDoc(doc(outCol, id));
  };

  /* ===== ุงูุจุญุซ ูู ุงูุณุฌู ===== */
  const handleSearch = () => {
    const term = searchTerm.trim().toLowerCase();
    if (!term) { setFiltered(records); return; }
    const data = records.filter((r) => normalize(r.name).includes(term) || r.date === term);
    setFiltered(data);
  };

  return (
    <div className="factory-page" dir="rtl">
      <button className="back-btn" onClick={() => navigate(-1)}>โฌ ุฑุฌูุน</button>
      <h2 className="page-title">๐ค ุงูุตุงุฏุฑ ูู ุงููุฎุฒู</h2>

      {/* ุงุฎุชูุงุฑ ุงูุชุงุฑูุฎ */}
      <div className="form-row">
        <label>๐ ุงูุชุงุฑูุฎ:</label>
        <input type="date" value={selectedDate} onChange={(e) => setSelectedDate(e.target.value)} />
      </div>

      {/* ูููุฐุฌ ุงูุฅุฏุฎุงู */}
      <div className="form-row">
        <input
          list="items-list"
          placeholder="ุงุณู ุงูุตูู"
          value={item}
          onChange={(e) => setItem(e.target.value)}
        />
        <datalist id="items-list">
          {itemOptions.map((opt) => <option key={opt} value={opt} />)}
        </datalist>

        <input type="number" placeholder="ุงููููุฉ" value={quantity} onChange={(e) => setQuantity(e.target.value)} />
        <input type="text" placeholder="ููุงุญุธุงุช" value={note} onChange={(e) => setNote(e.target.value)} />
        <button onClick={handleSubmit}>โ ุชุณุฌูู</button>
      </div>

      {/* ุดุฑูุท ุงูุจุญุซ ูู ุงูุณุฌู */}
      <div className="form-row">
        <input type="text" placeholder="ุงุจุญุซ ุจุงูุงุณู ุฃู ุงูุชุงุฑูุฎ" value={searchTerm} onChange={(e) => setSearchTerm(e.target.value)} />
        <button onClick={handleSearch}>๐ ุจุญุซ</button>
      </div>

      {/* ุฌุฏูู ุงูุตุงุฏุฑ */}
      <div className="table-container">
        <table className="styled-table">
          <thead>
            <tr>
              <th>ุงูุตูู</th><th>ุงููููุฉ</th><th>ุงูุณุงุจู</th><th>ุงูุญุงูู</th>
              <th>ุงูููุงุญุธุงุช</th><th>ุงูุชุงุฑูุฎ</th><th>ุญุฐู</th>
            </tr>
          </thead>
          <tbody>
            {filtered.map((r) => (
              <tr key={r.id}>
                <td>{r.name}</td>
                <td>{r.quantity}</td>
                <td>{r.prevQty ?? "-"}</td>
                <td>{r.currentQty ?? "-"}</td>
                <td>{r.note || "-"}</td>
                <td>{r.date}</td>
                <td><button className="delete-btn" onClick={() => handleDelete(r.id)}>ุญุฐู</button></td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  );
};

export default StreetOut;
