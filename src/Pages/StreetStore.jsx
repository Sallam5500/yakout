// src/pages/StreetStore.jsx
import React, { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import { db } from "../firebase";
import {
  collection, addDoc, onSnapshot,
  deleteDoc, updateDoc, doc, serverTimestamp, setDoc,
  query, orderBy, getDocs, collectionGroup
} from "firebase/firestore";
import "../GlobalStyles.css";

const normalize = (s = "") => String(s).trim().replace(/\s+/g, " ").toLowerCase();
const isAddition = (path) => path.includes("street-store");
const isDeduction = (path) => path.includes("street-out");

const BASE_ITEMS = [
 "ุดูุงุฑุฉ ูุฑููู", "ุจุณุจูุณุฉ", "ููุณ ุจูุฏู ูู ุจุณุจูุณุฉ", "ูุฑูุณุฉ", "ุจุณููุฉ",
  "ุญุจูุจู", "ุฑููุด", "ูููุฒุง", "ุฌูุงุด", "ูุดุงุจู", "ุตูุงุจุน", "ุจูุญ",
  "ุนูุจ ูุฑููุฉ", "ูุดุทูุทุฉ", "ูุงุฏุฌ", "ููุณ ูุงูู 1.750 ุฌุฑุงู", "ููุณ ุฌุฑุงูู",
  "ุนุฒูุฒูุฉ", "ุจุณุจูุณุฉ ุชุฑูู", "ุดูุงุฑุฉ ุณูุฏุงูู ููุณุฑ", "ู ุจูุฏู ูู ููุณุฑ",
  "ููุณ ุณูุฏุงูู ุฑูุดูู", "ููุณ ุจูุฏู ูุญูุต 250 ุฌุฑุงู", "ููุณ ุฃูููุฑ",
  "ูุฑุชููุฉ ุจูุฏู ุณููู", "ู ุณูุฑ ุจูุฏุฑู", "ู ุฌูุฒ ููุฏ ูุงุนู", "ู ุณููุฏ",
  "ุฌููุงุชููุฉ", "ู ูุจู ุจูุฏุฑู", "ููุณ ูุจู ุจูุฏุฑู 150 ุฌุฑุงู", "ุดููููุงุชู ุงุณูุฑ",
  "ุดููููุงุชู ุจูุถุงุก", "ูุฑุชููุฉ ุฒูุช", "ุฌุฑูู ุฒูุช", "ูุจุงูู", "ุจุงุณุชุฑู",
  "ูุงูููุง", "ูุงูููู 7ุณู", "ููู ุงุญูุฑ", "ุนูุจ ุทูุจูุฉ", "ูุฑุชููุฉ ุฎููุฑุฉ ููุฑูุฉ",
  "ุณููุฉ ูุฑู", "ูุดุง", "ุณูุฑ", "ุฏููู ุงูุฑุงู", "ูุฌุจุฉ ุจุชู ููุฑ",
  "ุฌูุฒ ููุฏ ูุญูุต", "ููุฒ ูุญูุต ูุฌุฑูุด", "ุฌูุฒ ููุฏ ุงุจูุถ", "ูุฌุจุฉ ุจุณููุช",
  "ุฑุงุจุทุฉ ุญูููุงุช", "ุนูุจ ุจุชู ููุฑ ูุต", "ุนูุจ ุจุณููุช ูุต", "ุนูุจ ุบุฑูุจุฉ ูุต",
  "ุนูุจ ูุนู ุณุงุฏู ูุต", "ุนูุจ ูุนู ููุจู ูุต", "ูุนุจ ุฌุงุชูู",
  "ุฏูุชุฑ ุชุฑูุณููุฑ ุงููุงู", "ููุจู", "ูุฌุจู ุณูุฑุจ", "ุจูุฑ ุงุณุชุฑุชุด",
  "ูุฑู ุณูููุงู ููุณ", "ุนูุจ ุฌุงุชูู ุฏุณุชู", "ุฏูุชุฑ ุชุฑุงูุณููุฑ ุณุงุฏู",
  "ูุฑุชููุฉ ุจููู ุจูุฏุฑ", "ุณุชุงู 2ุณู", "ุฌููู ุดูุงู", "ุฌููู ุณุฎู"
];

const StreetStore = () => {
  const navigate = useNavigate();

  const [name, setName] = useState("");
  const [quantity, setQty] = useState("");
  const [unit, setUnit] = useState("ุนุฏุฏ");
  const [editId, setEditId] = useState(null);
  const [items, setItems] = useState([]);
  const [options, setOptions] = useState([]);
  const [searchTerm, setSearchTerm] = useState("");
  const [filtered, setFiltered] = useState([]);
  const [totalQty, setTotalQty] = useState(null);
  const [selectedDate, setSelectedDate] = useState(new Date().toISOString().split("T")[0]);

  const itemsCol = collection(db, "items");

  /* ุชุญููู ุฃุณูุงุก ุงูุฃุตูุงู */
  useEffect(() => {
    const unsub = onSnapshot(itemsCol, (snap) => {
      const extra = snap.docs.map((d) => d.id);
      setOptions([...BASE_ITEMS, ...extra].filter((v, i, a) => a.indexOf(v) === i));
    });
    return () => unsub();
  }, []);

  /* ุชุญููู ุจูุงูุงุช ุงูููู */
  useEffect(() => {
    const dayDoc = doc(db, "street-store", selectedDate);
    const subCol = collection(dayDoc, "items");
    const q = query(subCol, orderBy("createdAt", "asc"));
    const unsub = onSnapshot(q, (snap) => {
      const data = snap.docs.map((d) => ({ id: d.id, ...d.data(), date: selectedDate }));
      setItems(data);
      setFiltered(data);
    });
    return () => unsub();
  }, [selectedDate]);

  /* ุญุณุงุจ ุงููููุฉ ุงูุณุงุจูุฉ ูุจู ุงูุญูุธ */
  const calcPrevTotal = async (nameKey) => {
    let add = 0;
    let out = 0;
    const all = await getDocs(collectionGroup(db, "items"));
    all.docs.forEach((snap) => {
      const data = snap.data();
      if (!data.nameKey && data.name) data.nameKey = normalize(data.name);
      if (data.nameKey !== nameKey) return;

      const parentDate = snap.ref.parent.parent.id; // YYYY-MM-DD
      if (parentDate >= selectedDate) return; // ูุญุชุงุฌ ูุง ูุจู ุงูููู ุงูุญุงูู ููุท

      const qty = parseFloat(data.quantity) || 0;
      if (isAddition(snap.ref.path)) add += qty;
      else if (isDeduction(snap.ref.path)) out += qty;
    });
    return add - out; // ุตุงูู ุงูุณุงุจู
  };

  const handleSave = async () => {
    const finalName = name.trim();
    if (!finalName) return alert("ุฃุฏุฎู ุงุณู ุงูุตูู");
    if (!quantity) return alert("ุฃุฏุฎู ุงููููุฉ");

    if (!options.includes(finalName)) {
      await setDoc(doc(itemsCol, finalName), { createdAt: serverTimestamp() });
    }

    const nameKey = normalize(finalName);
    const qtyNum = parseFloat(quantity);

    const prevTotal = await calcPrevTotal(nameKey);
    const currentTotal = prevTotal + qtyNum;

    const payload = {
      name: finalName,
      nameKey,
      quantity: qtyNum,
      unit,
      prevQty: prevTotal,
      currentQty: currentTotal,
      createdAt: serverTimestamp(),
      isEdited: !!editId,
    };

    const dayDoc = doc(db, "street-store", selectedDate);
    const subCol = collection(dayDoc, "items");

    if (editId) {
      const pwd = prompt("ูููุฉ ูุฑูุฑ ุงูุชุนุฏููุ");
      if (pwd !== "2991034") return alert("ูููุฉ ุงููุฑูุฑ ุบูุฑ ุตุญูุญุฉ");
      await updateDoc(doc(subCol, editId), payload);
      setEditId(null);
    } else {
      await addDoc(subCol, payload);
    }

    setName(""); setQty(""); setUnit("ุนุฏุฏ");
  };

  const handleDelete = async (id) => {
    const pwd = prompt("ูููุฉ ุงููุฑูุฑุ");
    if (pwd !== "2991034") return;
    if (!window.confirm("ุชุฃููุฏ ุงูุญุฐูุ")) return;

    const dayDoc = doc(db, "street-store", selectedDate);
    const subCol = collection(dayDoc, "items");
    await deleteDoc(doc(subCol, id));
  };

  const handleEdit = (it) => {
    setName(it.name);
    setQty(it.quantity);
    setUnit(it.unit);
    setEditId(it.id);
  };

  const handleSearch = () => {
    const term = searchTerm.trim().toLowerCase();
    if (!term) { setFiltered(items); setTotalQty(null); return; }

    const data = items.filter((it) => normalize(it.name).includes(term));
    setFiltered(data);

    const total = data.reduce((sum, it) => sum + parseFloat(it.quantity || 0), 0);
    setTotalQty(total);
  };

  return (
    <div className="page-container" dir="rtl">
      <div className="top-bar">
        <button className="back-button" onClick={() => navigate(-1)}>โฌ ุฑุฌูุน</button>
        <button onClick={() => window.print()}>๐จ๏ธ ุทุจุงุนุฉ</button>
      </div>

      <h2 className="page-title">๐ช ูุฎุฒู ุงูุดุงุฑุน</h2>

      {/* ุงุฎุชูุงุฑ ุงูุชุงุฑูุฎ */}
      <div className="form-row">
        <label>๐ ุงุฎุชุฑ ุงูุชุงุฑูุฎ:</label>
        <input type="date" value={selectedDate} onChange={(e) => setSelectedDate(e.target.value)} />
      </div>

      {/* ุงูุจุญุซ */}
      <div className="form-row">
        <input type="text" placeholder="ุงุจุญุซ ุจุงุณู ุงูุตูู" value={searchTerm} onChange={(e) => setSearchTerm(e.target.value)} />
        <button onClick={handleSearch}>๐ ุจุญุซ</button>
        {totalQty !== null && (
          <span style={{ marginRight: "1rem", color: "#007700", fontWeight: "bold" }}>
            ๐งฎ ุฅุฌูุงูู ุงููููุฉ: {totalQty}
          </span>
        )}
      </div>

      {/* ูููุฐุฌ ุงูุฅุฏุฎุงู */}
      <div className="form-row">
        <input list="items-list" placeholder="ุงุณู ุงูุตูู" value={name} onChange={(e) => setName(e.target.value)} />
        <datalist id="items-list">
          {options.map((opt) => <option key={opt} value={opt} />)}
        </datalist>

        <input type="number" placeholder="ุงููููุฉ" value={quantity} onChange={(e) => setQty(e.target.value)} />

        <select value={unit} onChange={(e) => setUnit(e.target.value)}>
          <option>ุนุฏุฏ</option><option>ูููู</option><option>ุดูุงุฑุฉ</option>
          <option>ุฌุฑุงู</option><option>ุจุฑููู</option><option>ููุณ</option>
          <option>ุฌุฑุฏู</option>
        </select>

        <button onClick={handleSave}>{editId ? "ุชุญุฏูุซ" : "ุฅุถุงูุฉ"}</button>
      </div>

      {/* ุฌุฏูู ุงูุจูุงูุงุช */}
      <table className="styled-table">
        <thead>
          <tr>
            <th>ุงูุงุณู</th>
            <th>ุงููููุฉ</th>
            <th>ุงูุณุงุจู</th>
            <th>ุงูุญุงูู</th>
            <th>ุงููุญุฏุฉ</th>
            <th>ุชุนุฏูู</th>
            <th>ุญุฐู</th>
          </tr>
        </thead>
        <tbody>
          {filtered.map((it) => (
            <tr key={it.id} style={{ backgroundColor: it.isEdited ? "#ffcccc" : "transparent" }}>
              <td>{it.name}</td>
              <td>{it.quantity}</td>
              <td>{it.prevQty ?? "-"}</td>
              <td>{it.currentQty ?? "-"}</td>
              <td>{it.unit}</td>
              <td><button onClick={() => handleEdit(it)}>ุชุนุฏูู</button></td>
              <td><button onClick={() => handleDelete(it.id)}>ุญุฐู</button></td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default StreetStore;
