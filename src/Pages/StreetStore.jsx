// src/pages/StreetStore.jsx
import React, { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import { db } from "../firebase";
import {
  collection,
  addDoc,
  onSnapshot,
  deleteDoc,
  updateDoc,
  doc,
  serverTimestamp,
  setDoc,
  query,
  orderBy,   // โญ๏ธ ููู ููุชุฑุชูุจ
} from "firebase/firestore";
import "../GlobalStyles.css";

/* ุชุทุจูุน ุงูุงุณู: ุฅุฒุงูุฉ ุงููุฑุงุบุงุช ุงูุฒุงุฆุฏุฉ + ุฃุญุฑู ุตุบูุฑุฉ */
const normalize = (s) => s.trim().replace(/\s+/g, " ").toLowerCase();

/* ุงูุฃุตูุงู ุงูุฃุณุงุณูุฉ */
const BASE_ITEMS = [
  "ุดูุงุฑุฉ ูุฑููู", "ุจุณุจูุณุฉ", "ููุณ ุจูุฏู ูู ุจุณุจูุณุฉ", "ูุฑูุณุฉ", "ุจุณููุฉ",
  "ุญุจูุจู", "ุฑููุด", "ูููุฒุง", "ุฌูุงุด", "ูุดุงุจู", "ุตูุงุจุน", "ุจูุญ",
  "ุนูุจ ูุฑููุฉ", "ูุดุทูุทุฉ", "ูุงุฏุฌ", "ููุณ ูุงูู 1.750 ุฌุฑุงู", "ููุณ ุฌุฑุงูู",
  "ุนุฒูุฒูุฉ", "ุจุณุจูุณุฉ ุชุฑูู", "ุดูุงุฑุฉ ุณูุฏุงูู ููุณุฑ", "ู ุจูุฏู ูู ููุณุฑ",
  "ููุณ ุณูุฏุงูู ุฑูุดูู", "ููุณ ุจูุฏู ูุญูุต 250 ุฌุฑุงู", "ููุณ ุฃูููุฑ",
  "ูุฑุชููุฉ ุจูุฏู ุณููู", "ู ุณูุฑ ุจูุฏุฑู", "ู ุฌูุฒ ููุฏ ูุงุนู", "ู ุณููุฏ",
  "ุฌููุงุชููุฉ", "ู ูุจู ุจูุฏุฑู", "ููุณ ูุจู ุจูุฏุฑู 150 ุฌุฑุงู", "ุดููููุงุชู ุงุณูุฑ",
  "ุดููููุงุชู ุจูุถุงุก", "ูุฑุชููุฉ ุฒูุช", "ุฌุฑูู ุฒูุช", "ูุจุงูู", "ุจุงุณุชุฑู",
  "ูุงูููุง", "ูุงูููู 7ุณู", "ููู ุงุญูุฑ", "ุนูุจ ุทูุจูุฉ", "ูุฑุชููุฉ ุฎููุฑุฉ ููุฑูุฉ",
  "ุณููุฉ ูุฑู", "ูุดุง", "ุณูุฑ", "ุฏููู ุงูุฑุงู", "ูุฌุจุฉ ุจุชู ููุฑ",
  "ุฌูุฒ ููุฏ ูุญูุต", "ููุฒ ูุญูุต ูุฌุฑูุด", "ุฌูุฒ ููุฏ ุงุจูุถ", "ูุฌุจุฉ ุจุณููุช",
  "ุฑุงุจุทุฉ ุญูููุงุช", "ุนูุจ ุจุชู ููุฑ ูุต", "ุนูุจ ุจุณููุช ูุต", "ุนูุจ ุบุฑูุจุฉ ูุต",
  "ุนูุจ ูุนู ุณุงุฏู ูุต", "ุนูุจ ูุนู ููุจู ูุต", "ูุนุจ ุฌุงุชูู",
  "ุฏูุชุฑ ุชุฑูุณููุฑ ุงููุงู", "ููุจู", "ูุฌุจู ุณูุฑุจ", "ุจูุฑ ุงุณุชุฑุชุด",
  "ูุฑู ุณูููุงู ููุณ", "ุนูุจ ุฌุงุชูู ุฏุณุชู", "ุฏูุชุฑ ุชุฑุงูุณููุฑ ุณุงุฏู",
  "ูุฑุชููุฉ ุจููู ุจูุฏุฑ", "ุณุชุงู 2ุณู", "ุฌููู ุดูุงู", "ุฌููู ุณุฎู"
];

const StreetStore = () => {
  const navigate                       = useNavigate();
  const [name, setName]                = useState("");
  const [customName, setCustomName]    = useState("");
  const [quantity, setQuantity]        = useState("");
  const [unit, setUnit]                = useState("ุนุฏุฏ");
  const [items, setItems]              = useState([]);
  const [editId, setEditId]            = useState(null);
  const [itemOptions, setItemOptions]  = useState([...BASE_ITEMS, "ุฃุฏุฎู ุตูู ุฌุฏูุฏ"]);

  /* Collections */
  const storeCol = collection(db, "street-store");
  const itemsCol = collection(db, "items");  // ููุงุญุชูุงุธ ุจุฃุตูุงู ูุถุงูุฉ ูุงุญููุง

  /* ุชุญููู ุงูุฃุตูุงู ุงูุฏููุงููููุฉ */
  useEffect(() => {
    const unsub = onSnapshot(itemsCol, (snap) => {
      const extra = snap.docs.map((d) => d.id);
      setItemOptions([...BASE_ITEMS, ...extra, "ุฃุฏุฎู ุตูู ุฌุฏูุฏ"]
        .filter((v, i, arr) => arr.indexOf(v) === i)
        .sort());
    });
    return () => unsub();
  }, []);

  /* ุชุญููู ูุฎุฒูู ุงูุดุงุฑุน ุจุชุฑุชูุจ ุชุตุงุนุฏู ุจุงูุชุงุฑูุฎ */
  useEffect(() => {
    const q = query(storeCol, orderBy("date", "asc"));  // ููู 1 ุซู 2 ุซู 3...
    const unsub = onSnapshot(q, (snap) => {
      const data = snap.docs.map((d) => ({ id: d.id, ...d.data() }));
      setItems(data);
    });
    return () => unsub();
  }, []);

  /* ุฅุถุงูุฉ ุฃู ุชุญุฏูุซ ุตูู */
  const handleAddOrUpdate = async () => {
    const rawName   = name === "ุฃุฏุฎู ุตูู ุฌุฏูุฏ" ? customName : name;
    const finalName = rawName.trim();
    const key       = normalize(finalName);

    if (!finalName || !quantity)
      return alert("ูู ูุถูู ุฃุฏุฎู ุงูุงุณู ูุงููููุฉ");

    /* ุญูุธ ุงูุตูู ุงูุฌุฏูุฏ ูู ููููุดู items ุฅู ูู ููู ููุฌูุฏ */
    if (name === "ุฃุฏุฎู ุตูู ุฌุฏูุฏ") {
      await setDoc(doc(db, "items", finalName), { createdAt: serverTimestamp() });
    }

    if (editId) {
      const pwd = prompt("ุงุฏุฎู ูููุฉ ุงูุณุฑ ูุชุนุฏูู ุงูุตูู:");
      if (!["1234", "2991034"].includes(pwd)) return alert("ูููุฉ ุงููุฑูุฑ ุบูุฑ ุตุญูุญุฉ");
      await updateDoc(doc(db, "street-store", editId), {
        name: finalName,
        nameKey: key,
        quantity: parseFloat(quantity),
        unit,
        isEdited: true,
      });
      setEditId(null);
    } else {
      await addDoc(storeCol, {
        name: finalName,
        nameKey: key,
        quantity: parseFloat(quantity),
        unit,
        date: new Date().toISOString().split("T")[0], // YYYY-MM-DD
        isEdited: false,
        timestamp: serverTimestamp(),
      });
    }

    // ุฅุนุงุฏุฉ ุชุนููู ุงูุญููู
    setName(""); setCustomName(""); setQuantity(""); setUnit("ุนุฏุฏ");
  };

  /* ุญุฐู ุตูู */
  const handleDelete = async (id) => {
    const pwd = prompt("ุฃุฏุฎู ูููุฉ ุงููุฑูุฑ ููุญุฐู:");
    if (!["1234", "2991034"].includes(pwd)) return alert("ูููุฉ ุงููุฑูุฑ ุบูุฑ ุตุญูุญุฉ.");
    if (!window.confirm("ูู ุฃูุช ูุชุฃูุฏ ูู ุงูุญุฐูุ")) return;
    await deleteDoc(doc(db, "street-store", id));
  };

  /* ุชุญููู ุจูุงูุงุช ุตูู ููุชุนุฏูู */
  const handleEdit = (it) => {
    setName(it.name);
    setCustomName("");
    setQuantity(it.quantity);
    setUnit(it.unit);
    setEditId(it.id);
  };

  return (
    <div className="page-container" dir="rtl">
      <button className="back-button" onClick={() => navigate(-1)}>โฌ ุฑุฌูุน</button>
      <h2 className="page-title">๐ช ุงููุฎุฒู ุงููู ูู ุงูุดุงุฑุน</h2>

      {/* ูููุฐุฌ ุงูุฅุฏุฎุงู */}
      <div className="form-row">
        <select value={name} onChange={(e) => setName(e.target.value)}>
          <option value="">ุงุฎุชุฑ ุงูุตูู</option>
          {itemOptions.map((opt) => (
            <option key={opt} value={opt}>{opt}</option>
          ))}
        </select>

        {name === "ุฃุฏุฎู ุตูู ุฌุฏูุฏ" && (
          <input
            placeholder="ุฃุฏุฎู ุงุณู ุงูุตูู"
            value={customName}
            onChange={(e) => setCustomName(e.target.value)}
          />
        )}

        <input
          type="number"
          placeholder="ุงููููุฉ"
          value={quantity}
          onChange={(e) => setQuantity(e.target.value)}
        />

        <select value={unit} onChange={(e) => setUnit(e.target.value)}>
          <option>ุนุฏุฏ</option><option>ูููู</option><option>ุดูุงุฑุฉ</option>
          <option>ุฌุฑุงู</option><option>ุจุฑููู</option><option>ููุณ</option><option>ุฌุฑุฏู</option>
          <option>ุดูุงุฑู</option>
        </select>

        <button className="add-button" onClick={handleAddOrUpdate}>
          {editId ? "ุชุญุฏูุซ" : "ุฅุถุงูุฉ"}
        </button>
      </div>

      {/* ุฌุฏูู ุงูุจูุงูุงุช */}
      <table className="styled-table">
        <thead>
          <tr>
            <th>ุงูุงุณู</th><th>ุงููููุฉ</th><th>ุงููุญุฏุฉ</th>
            <th>ุงูุชุงุฑูุฎ</th><th>ุชุนุฏูู</th><th>ุญุฐู</th>
          </tr>
        </thead>
        <tbody>
          {items.map((it) => (
            <tr key={it.id} style={{ backgroundColor: it.isEdited ? "#ffcccc" : "transparent" }}>
              <td>{it.name}</td>
              <td>{it.quantity}</td>
              <td>{it.unit}</td>
              <td>{it.date}</td>
              <td><button className="edit-btn" onClick={() => handleEdit(it)}>ุชุนุฏูู</button></td>
              <td><button className="delete-btn" onClick={() => handleDelete(it.id)}>ุญุฐู</button></td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default StreetStore;
