// src/pages/Rooms.jsx
import React, { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import { db } from "../firebase";
import {
  collection, doc, addDoc, onSnapshot, deleteDoc,
  updateDoc, serverTimestamp, query, orderBy,
  setDoc, getDocs, collectionGroup
} from "firebase/firestore";
import "../GlobalStyles.css";

const normalize = (s) => s.trim().replace(/\s+/g, " ").toLowerCase();

const itemOptions = [
  "ุจูุถ", "ูุงูุฌุง ูููุช", "ูุฑููุฉ ูููุช", "ูููู ูููุช", "ูุฑุจู ูุดูุด", "ูุจุงูู ",
  "ุฌุจูู ุชุดูุฒ ููู ", "ุฑููุงูุชู ุงุจูุถ ", "ุฑููุงูุชู ุงุณูุฑ ", "ุจุดุฑ ุงุณูุฑ ",
  "ุจุดุฑ ุงุจูุถ ", "ููุชุณ ", "ููุชููุง ", "ุฌูุงุด ุฌุฏูุฏ ", "ุฌูุงุด  ", "ุฃุฏุฎู ุตูู ุฌุฏูุฏ"
];

const Rooms = () => {
  const navigate = useNavigate();

  const [name, setName] = useState("");
  const [customName, setCustomName] = useState("");
  const [quantity, setQty] = useState("");
  const [unit, setUnit] = useState("ุนุฏุฏ");
  const [items, setItems] = useState([]);
  const [editId, setEditId] = useState(null);
  const [selectedDate, setSelectedDate] = useState(new Date().toISOString().split("T")[0]);

  const [searchTerm, setSearchTerm] = useState("");
  const [filtered, setFiltered] = useState([]);
  const [totalQty, setTotalQty] = useState(null);

  useEffect(() => {
    const q = query(
      collection(db, "rooms-store", selectedDate, "items"),
      orderBy("createdAt", "asc")
    );
    return onSnapshot(q, (snap) => {
      const data = snap.docs.map((d) => ({ id: d.id, ...d.data() }));
      setItems(data);
      setFiltered(data);
    });
  }, [selectedDate]);

  const handleAddOrUpdate = async () => {
    const finalName = name === "ุฃุฏุฎู ุตูู ุฌุฏูุฏ" ? customName.trim() : name.trim();
    if (!finalName || !quantity) return alert("ุฃุฏุฎู ุงูุงุณู ูุงููููุฉ");

    const key = normalize(finalName);
    const qty = parseFloat(quantity);
    const todayRef = collection(db, "rooms-store", selectedDate, "items");

    // ุงุฌูุน ุงููููุฉ ุงูุณุงุจูุฉ ูู ุฌููุน ุงูุฃูุงู
    const allDocs = await getDocs(collectionGroup(db, "items"));
    let prev = 0;
    allDocs.forEach((d) => {
      const data = d.data();
      if (data.nameKey === key && data.source === "rooms") prev += parseFloat(data.quantity || 0);
      if (data.nameKey === key && data.source === "rooms-out") prev -= parseFloat(data.quantity || 0);
    });

    const payload = {
      name: finalName,
      nameKey: key,
      quantity: qty,
      unit,
      prevQty: prev,
      currentQty: prev + qty,
      createdAt: serverTimestamp(),
      isEdited: !!editId,
      source: "rooms"
    };

    if (editId) {
      const pwd = prompt("ูููุฉ ูุฑูุฑ ุงูุชุนุฏููุ");
      if (pwd !== "2991034") return alert("ูููุฉ ุงููุฑูุฑ ุบูุฑ ุตุญูุญุฉ");
      await updateDoc(doc(db, "rooms-store", selectedDate, "items", editId), payload);
      setEditId(null);
    } else {
      await addDoc(todayRef, payload);
    }

    setName(""); setCustomName(""); setQty(""); setUnit("ุนุฏุฏ");
  };

  const handleDelete = async (id) => {
    const pwd = prompt("ูููุฉ ุงููุฑูุฑ ููุญุฐูุ");
    if (pwd !== "2991034") return;
    if (!window.confirm("ุชุฃููุฏ ุงูุญุฐูุ")) return;
    await deleteDoc(doc(db, "rooms-store", selectedDate, "items", id));
  };

  const handleEdit = (it) => {
    setName(it.name); setCustomName("");
    setQty(it.quantity); setUnit(it.unit);
    setEditId(it.id);
  };

  const handleSearch = () => {
    const term = searchTerm.trim().toLowerCase();
    if (!term) { setFiltered(items); setTotalQty(null); return; }
    const data = items.filter((it) => normalize(it.name).includes(term));
    setFiltered(data);
    const total = data.reduce((sum, it) => sum + parseFloat(it.quantity || 0), 0);
    setTotalQty(total);
  };

  return (
    <div className="page-container" dir="rtl">
      <button className="back-button" onClick={() => navigate(-1)}>โฌ ุฑุฌูุน</button>
      <h2 className="page-title">๐ง ุบุฑูุฉ ุงูุชุจุฑูุฏ</h2>

      <div className="form-row">
        <label>๐ ุงุฎุชุฑ ุงูุชุงุฑูุฎ:</label>
        <input type="date" value={selectedDate} onChange={(e) => setSelectedDate(e.target.value)} />
      </div>

      <div className="form-row">
        <input
          type="text"
          placeholder="ุงุจุญุซ ุจุงุณู ุงูุตูู"
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
        />
        <button onClick={handleSearch}>๐ ุจุญุซ</button>
        {totalQty !== null && (
          <span style={{ marginRight: "1rem", color: "#007700", fontWeight: "bold" }}>
            ๐งฎ ุฅุฌูุงูู ุงููููุฉ: {totalQty}
          </span>
        )}
      </div>

      <div className="form-row">
        <input
          list="items-list"
          placeholder="ุงุณู ุงูุตูู"
          value={name}
          onChange={(e) => setName(e.target.value)}
        />
        <datalist id="items-list">
          {itemOptions.map((opt) => <option value={opt} key={opt} />)}
        </datalist>

        {name === "ุฃุฏุฎู ุตูู ุฌุฏูุฏ" && (
          <input
            placeholder="ุงุณู ุงูุตูู ุงูุฌุฏูุฏ"
            value={customName}
            onChange={(e) => setCustomName(e.target.value)}
          />
        )}

        <input
          type="number"
          placeholder="ุงููููุฉ"
          value={quantity}
          onChange={(e) => setQty(e.target.value)}
        />

        <select value={unit} onChange={(e) => setUnit(e.target.value)}>
          <option>ุนุฏุฏ</option><option>ูููู</option><option>ุตุงุฌ</option>
          <option>ุฌุฑุฏู</option><option>ููุณ</option><option>ุจุฑูููุฉ</option>
        </select>

        <button onClick={handleAddOrUpdate}>{editId ? "ุชุญุฏูุซ" : "ุฅุถุงูุฉ"}</button>
      </div>

      <table className="styled-table">
        <thead>
          <tr>
            <th>ุงูุตูู</th><th>ุงููููุฉ</th><th>ุงููุญุฏุฉ</th>
            <th>ุงูุณุงุจู</th><th>ุงูุญุงูู</th><th>ุชุนุฏูู</th><th>ุญุฐู</th>
          </tr>
        </thead>
        <tbody>
          {filtered.map((it) => (
            <tr key={it.id} style={{ backgroundColor: it.isEdited ? "#ffcccc" : "transparent", textAlign: "center" }}>
              <td>{it.name}</td>
              <td>{it.quantity}</td>
              <td>{it.unit}</td>
              <td>{it.prevQty || 0}</td>
              <td>{it.currentQty || 0}</td>
              <td><button onClick={() => handleEdit(it)}>ุชุนุฏูู</button></td>
              <td><button onClick={() => handleDelete(it.id)}>ุญุฐู</button></td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default Rooms;